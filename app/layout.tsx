import './globals.css'
import { type Metadata } from 'next'
import {
  ClerkProvider,
} from '@clerk/nextjs'
import localFont from 'next/font/local'
import PerformanceMonitor from '@/components/PerformanceMonitor'
import Script from "next/script"
import React from 'react'

// 简化的代理配置，仅在服务器端使用
const PROXY_URL = process.env.PROXY_URL || '';

if (typeof window === 'undefined' && PROXY_URL) {
  try {
    const { ProxyAgent, fetch: undiciFetch } = require('undici');
    const proxyAgent = new ProxyAgent(PROXY_URL);
    
    // 只在服务器端覆盖 fetch
    global.fetch = async (input: RequestInfo | URL, init?: RequestInit) => {
      try {
        return await undiciFetch(input, {
          ...init,
          dispatcher: proxyAgent
        });
      } catch (error) {
        console.error("Server fetch error:", error);
        throw error;
      }
    };
  } catch (error) {
    console.warn("Proxy setup failed:", error);
  }
}

// 优化字体加载策略
const satoshi = localFont({
  src: [
    {
      path: '../public/fonts/satoshi-regular.woff2',
      weight: '400',
      style: 'normal',
    },
    {
      path: '../public/fonts/satoshi-medium.woff2',
      weight: '500',
      style: 'normal',
    },
    {
      path: '../public/fonts/satoshi-bold.woff2',
      weight: '700',
      style: 'normal',
    },
  ],
  display: 'swap',
  preload: true, // 预加载关键字体
  fallback: ['system-ui', 'arial'], // 添加字体回退
  variable: '--font-satoshi', // 使用CSS变量
});

export const metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode
}>) {
  // 简化 Clerk 配置检查
  const clerkPublishableKey = process.env.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY || '';

  const htmlContent = (
    <html lang="en" data-theme="light" suppressHydrationWarning className={`${satoshi.variable}`}>
      <head>
        {/* 最重要的资源预加载 - 为LCP优化 */}
        <link rel="preload" href="/images/optimized/hero/hero4.webp" as="image" type="image/webp" />
        <link rel="preload" href="/fonts/satoshi-regular.woff2" as="font" type="font/woff2" crossOrigin="" />
        <link rel="preload" href="/fonts/satoshi-medium.woff2" as="font" type="font/woff2" crossOrigin="" />
        
        {/* 预连接到外部域名 */}
        <link rel="preconnect" href="https://www.googletagmanager.com" />
        <link rel="preconnect" href="https://www.google.com" />
        <link rel="preconnect" href="https://accounts.google.com" />
        
        {/* Critical CSS for Hero section - LCP optimization */}
        <style dangerouslySetInnerHTML={{
          __html: `
            .hero-section { min-height: 60vh; contain: layout style paint; }
            .hero-image { aspect-ratio: 1 / 1; max-width: 500px; width: 100%; }
            .prevent-layout-shift { contain: layout; }
            .skeleton { animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite; background-color: #e5e7eb; }
            @keyframes pulse { 0%, 100% { opacity: 1; } 50% { opacity: 0.5; } }
          `
        }} />
        
        {/* 基本元数据 */}
        <link rel="icon" href="/favicon.ico" sizes="any" />
        <meta charSet="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="manifest" href="/manifest.json" />
      </head>
      <body className={`${satoshi.variable} antialiased`}>
        <PerformanceMonitor />
        <div id="root" style={{ minHeight: '100vh' }}>
          {children}
        </div>

        {/* Google Identity Services SDK */}
        <Script 
          src="https://accounts.google.com/gsi/client" 
          strategy="afterInteractive"
        />
        {/* 使用Script组件来替代内联脚本，避免CSP问题 */}
        <Script
          strategy="afterInteractive"
          dangerouslySetInnerHTML={{
            __html: `
              // Clarity
              setTimeout(function() {
                (function(c,l,a,r,i,t,y){
                  c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};
                  t=l.createElement(r);t.async=1;t.src="https://www.clarity.ms/tag/"+i+"?ref=bwt";
                  y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);
                })(window, document, "clarity", "script", "r341ayxao1");
              }, 2000);
            `
          }}
        />
        
        {/* Google Analytics */}
        <Script
          src="https://www.googletagmanager.com/gtag/js?id=G-SQ0ZZ6EFP6"
          strategy="afterInteractive"
        />
        <Script strategy="afterInteractive">
          {`
            window.dataLayer = window.dataLayer || [];
            function gtag(){dataLayer.push(arguments);}
            gtag('js', new Date());
            gtag('config', 'G-SQ0ZZ6EFP6');
          `}
        </Script>
        
        {/* Google CSE and Ahrefs */}
        <Script
          src="https://cse.google.com/cse.js?cx=c2e98ada1f90c4fda"
          strategy="lazyOnload"
        />
        <Script
          src="https://analytics.ahrefs.com/analytics.js"
          data-key="pzQdswZNDZJoi+e1uLS3jg"
          strategy="lazyOnload"
        />
      </body>
    </html>
  );

  // 总是使用 ClerkProvider 包装，避免组件错误
  return (
    <ClerkProvider publishableKey={clerkPublishableKey}>
      {htmlContent}
    </ClerkProvider>
  );
}
